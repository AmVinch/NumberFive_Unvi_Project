<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 해당 파일에 모든 쿼리문을 작성 -->
<!--by수경 학생의 학사경고, 제적을 위한 stutusInfo mapper입니다.-->
<mapper namespace="statusInfoMapper">

<!-- by수경 stutusInfo resultMap -->
<resultMap type="kh.study.NF.emp.vo.StatusInfoVO" id="statusInfo">
<id column="STATUS_NO" property="statusNo"/>
<result column="STU_NO" property="stuNo"/>
<result column="NOW_STATUS" property="nowStatus"/>
<result column="AFTER_STATUS" property="afterStatus"/>
<result column="APPLY_DATE" property="applyDate"/>
<result column="APPROVAL_DATE" property="approvalDate"/>
<result column="ING_STATUS" property="ingStatus"/>
<!-- by수경 1:1관계 (학사경고/제적) -->
<association property="academicProbationVO" resultMap="probation"/>
<association property="stuOutVO" resultMap="stuOut"/>
</resultMap>
	
<!--by수경 stuOut resultMap 제적 -->
<resultMap type="kh.study.NF.emp.vo.StuOutVO" id="stuOut">
<id column="STU_OUT_NO" property="stuOutNo"/>
<result column="STU_NO" property="stuNo"/>
<result column="STU_OUT_DATE" property="stuOutDate"/>
<result column="STU_OUT_REASON" property="stuOutReason"/>
<!--by수경 1:1관계  -->
<association property="studentVO" resultMap="studentMapper.student"/>
</resultMap>

<!--by수경 academicProbation resultMap 학사경고 -->
<resultMap type="kh.study.NF.emp.vo.AcademicProbationVO" id="probation">
<id column="PROB_NO" property="probNo"/>
<result column="STU_NO" property="stuNo"/>
<result column="PROB_DATE" property="probDate"/>
<result column="PROB_REASON" property="probReason"/>
<result column="SEM_NO" property="semNo"/>
<result column="MEM_NO" property="memNo"/>
</resultMap>

<!--by수경 학사경고 페이지 전체 학생 조회하기 -->
<select id="selectAllStu" resultMap="studentMapper.student" parameterType="hashMap">
	SELECT (SELECT MEM_NAME FROM MEMBER WHERE MEM_NO = S.MEM_NO) AS MEM_NAME
		 , STU_NO
		 , (SELECT COLL_NAME FROM COLLEAGE WHERE COLL_NO = S.COLL_NO) AS COLL_NAME
		 , (SELECT DEPT_NAME FROM DEPT WHERE DEPT_NO = S.DEPT_NO) AS DEPT_NAME
		 , COLL_NO
		 , DEPT_NO
		 , STU_STATUS
		 , (SELECT COUNT(PROB_NO) FROM ACADEMIC_PROBATION WHERE STU_NO = S.STU_NO)AS PROB_NO
		 , (SELECT COUNT(STU_OUT_NO) FROM STU_OUT WHERE STU_NO = S.STU_NO) AS STU_OUT_NO
	FROM STU S 
	WHERE 1 = 1
	<if test="collNo != null and !collNo.equals('')">
		AND COLL_NO = #{collNo}
	</if>
	<if test="deptNo != null and !deptNo.equals('')">
		AND DEPT_NO = #{deptNo}
	</if>
	<if test="stuStatus != null and !stuStatus.equals('')">
		AND STU_STATUS = #{stuStatus}
	</if>
	<if test="memName != null and !memName.equals('')">
		AND (SELECT UPPER(MEM_NAME) FROM MEMBER WHERE MEM_NO = S.MEM_NO) LIKE UPPER('%'||#{memName}||'%')
	</if>
	ORDER BY STU_NO DESC
</select>

<!--by수경 학사경고 모달창 학생 기본정보 데이터 출력 -->
<select id="probationStuInfo" resultMap="studentMapper.student">
	SELECT STU_NO
		 , (SELECT MEM_NAME FROM MEMBER WHERE MEM_NO = S.MEM_NO) AS MEM_NAME
		 , (SELECT COLL_NAME FROM COLLEAGE WHERE COLL_NO = S.COLL_NO) AS COLL_NO
		 , (SELECT DEPT_NAME FROM DEPT WHERE DEPT_NO = S.DEPT_NO) AS DEPT_NO
		 , STU_STATUS
		 , (SELECT MEM_TELL FROM MEMBER WHERE MEM_NO = S.MEM_NO)AS MEM_TELL
		 , (SELECT TO_CHAR(MEM_BIRTH, 'YYYY"년"MM"월"DD"일"') FROM MEMBER WHERE MEM_NO = S.MEM_NO) AS MEM_BIRTH
		 , (SELECT MEM_ADDR ||''|| MEM_ADDR_DETAIL FROM MEMBER WHERE MEM_NO = S.MEM_NO) AS MEM_ADDR
		 , (SELECT TO_CHAR(STU_YEAR)||'학년'||' '||TO_CHAR(STU_SEM)||'학기' FROM STU WHERE STU_NO =S.STU_NO) AS STU_YEAR
		 , MEM_NO
	FROM STU S
	WHERE STU_NO = #{stuNo}
</select>

<!--by수경 학사경고 일자 사유 리스트 -->
<select id="probationReason" resultMap="probation">
SELECT TO_CHAR(PROB_DATE, 'YYYY"년"MM"월"DD"일"') AS PROB_DATE
	 , PROB_REASON
	 , PROB_NO
FROM ACADEMIC_PROBATION
WHERE STU_NO = #{stuNo}

</select>

<!-- by수경 학사경고 승인 시 학사경고 테이블에 넣을 데이터 -->
<insert id="insertProbation">

<selectKey resultType="String" keyProperty="probNo" order="BEFORE">
SELECT 'PROB_'|| LPAD(NVL(MAX(TO_NUMBER(SUBSTR(PROB_NO,6))), 0)+1, 3, 0) 
FROM ACADEMIC_PROBATION
</selectKey>
	
	INSERT INTO ACADEMIC_PROBATION(PROB_NO
								 , STU_NO
								 , PROB_REASON
								 , SEM_NO
								 , MEM_NO 	
						)VALUES( #{probNo}
							   , #{stuNo}
							   , #{probReason}
							   , #{semNo}
							   , #{memNo}
	)

</insert>

<!--by수경 statusInfo에 데이터 삽입하기(학사경고/제적 모두 넣기) -->
<insert id="insertStatusInfo">
<selectKey resultType="String" keyProperty="statusNo" order="BEFORE">
SELECT 'STATUS_NO_'|| LPAD(NVL(MAX(TO_NUMBER(SUBSTR(STATUS_NO,11))), 0)+1, 3, 0) 
FROM STATUS_INFO
</selectKey>

	INSERT INTO STATUS_INFO( STATUS_NO
						   , STU_NO
						   , NOW_STATUS
						   , AFTER_STATUS
						   , ING_STATUS
						   , APPROVAL_DATE
				) VALUES( #{statusNo}
						, #{stuNo}
						, #{nowStatus}
						, #{afterStatus}
						, #{ingStatus}
						, #{approvalDate}
	)

</insert>

<!--by수경 stu-out 제적 데이터 삽입하기 (학사경고 3회 이상일 때) -->
<insert id="insertStuOut">
<selectKey resultType="String" keyProperty="stuOutNo" order="BEFORE">
SELECT 'STU_OUT_NO_'|| LPAD(NVL(MAX(TO_NUMBER(SUBSTR(STU_OUT_NO,12))), 0)+1, 3, 0) 
FROM STU_OUT
</selectKey>

	INSERT INTO STU_OUT (STU_OUT_NO
					   , STU_NO
					   , STU_OUT_REASON
			 )VALUES( #{stuOutNo}
			 		, #{stuNo}
			 		, #{stuOutReason}
	)
</insert>

<!--by수경 검색조건에서 전공대학 데이터 넣었을 때 전공학과가 나오는 ajax -->
<select id="getDeptList" resultMap="professorMapper.dept" parameterType="hashMap">
	SELECT 
	 	D.DEPT_NO 
    	, DEPT_NAME
   		, C.COLL_NO
   		, COLL_NAME
   		
    FROM  DEPT D , COLLEAGE C
    WHERE D.COLL_NO = C.COLL_NO
    <if test="collNo != null and !collNo.equals('')">
    AND D.COLL_NO = #{collNo}
    </if>
	ORDER BY COLL_NO

</select>


<!--by수경 제적학생 목록 -->
<select id="selectStuOutList" resultMap="stuOut" parameterType="hashMap">
	SELECT STU_OUT_NO
		 , STU_NO 
		 , TO_CHAR(STU_OUT_DATE,'YYYY"년"MM"월"DD"일"') AS STU_OUT_DATE
		 , STU_OUT_REASON
		 , (SELECT MEM_NAME FROM MEMBER WHERE MEM_NO =(SELECT MEM_NO FROM STU WHERE STU_NO = S.STU_NO)) AS MEM_NAME
		 , (SELECT COLL_NAME FROM COLLEAGE WHERE COLL_NO =(SELECT COLL_NO FROM STU WHERE STU_NO = S.STU_NO)) AS COLL_NAME
		 , (SELECT DEPT_NAME FROM DEPT WHERE DEPT_NO = (SELECT DEPT_NO FROM STU WHERE STU_NO = S.STU_NO)) AS DEPT_NAME
		 , (SELECT STU_STATUS FROM STU WHERE STU_NO = S.STU_NO) AS STU_STATUS
	FROM STU_OUT S
	WHERE 1 = 1
	<if test="collNo != null and !collNo.equals('')">
		AND (SELECT COLL_NO FROM STU WHERE STU_NO = S.STU_NO) = #{collNo}
	</if>
	<if test="deptNo != null and !deptNo.equals('')">
		AND (SELECT DEPT_NO FROM STU WHERE STU_NO = S.STU_NO) = #{deptNo}
	</if>
	<if test="stuStatus != null and !stuStatus.equals('')">
		AND (SELECT STU_STATUS FROM STU WHERE STU_NO = S.STU_NO) = #{stuStatus}
	</if>
	<if test="memName != null and !memName.equals('')">
		AND (SELECT UPPER(MEM_NAME) FROM MEMBER WHERE MEM_NO = (SELECT MEM_NO FROM STU WHERE STU_NO = S.STU_NO)) LIKE UPPER('%'||#{memName}||'%')
	</if>
	ORDER BY STU_NO DESC
</select>

</mapper>